grammar JBLang;

program
    : statement* EOF
    ;

statement
    : functionDecl
    | varDecl
    | spawnStmt
    | returnStmt
    | exprStmt
    | block
    ;

functionDecl
    : typeSpec IDENTIFIER '(' paramList? ')' block  // C-style: return type before function name
    ;

paramList
    : param (',' param)*
    ;

param
    : typeSpec IDENTIFIER  // C-style: type before parameter name
    ;

typeSpec
    : 'void'
    | 'int'
    | 'string'
    | 'bool'
    ;

varDecl
    : typeSpec IDENTIFIER ('=' expression)? ';'  // C-style: type before variable name
    ;

spawnStmt
    : 'spawn' expression ';'  // Kept for concurrent execution
    ;

returnStmt
    : 'return' expression? ';'
    ;

exprStmt
    : expression ';'
    ;

block
    : '{' statement* '}'
    ;

expression
    : primary                                       # PrimaryExpr
    | expression '.' IDENTIFIER                     # MemberExpr
    | functionCall                                  # FuncCallExpr
    | expression op=('*'|'/') expression           # MulDivExpr
    | expression op=('+'|'-') expression           # AddSubExpr
    | expression op=('=='|'!='|'<'|'>'|'<='|'>=') expression # CompareExpr
    | expression '=' expression                     # AssignExpr
    | IDENTIFIER                                    # VarExpr
    | literal                                       # LiteralExpr
    ;

functionCall
    : IDENTIFIER '(' argumentList? ')'
    ;

argumentList
    : expression (',' expression)*
    ;

primary
    : '(' expression ')'
    | IDENTIFIER
    | literal
    ;

literal
    : INTEGER
    | STRING
    | 'true'
    | 'false'
    ;

INTEGER : [0-9]+ ;
STRING  : '"' (~["])* '"' ;
IDENTIFIER : [a-zA-Z_][a-zA-Z0-9_]* ;
WS : [ \t\r\n]+ -> skip ;
COMMENT : '//' ~[\r\n]* -> skip ;